{"version":3,"sources":["Editor.tsx","constants.ts","App.tsx","lodashMatches.tsx","serviceWorker.ts","index.tsx"],"names":["Editor","value","handleValueChanged","prefix","suffix","error","refSpan","useRef","className","onClick","e","current","focus","ref","contentEditable","onKeyUp","newValue","innerText","aria-live","examples","input","output","lodashFns","Object","keys","lodash","filter","fnName","App","useState","setInput","setOutput","inputError","setInputError","outputError","setOutputError","lodashFunctions","setLodashFunctions","useEffect","response","outputObjString","inputJSONString","outputJSONString","inputArgs","JSON5","parse","matchingFns","stringify","toString","fn","lodashFn","actualOutputObj","cloneDeep","lodashMatches","handleInputChanged","useCallback","handleOutputChanged","handleExampleChanged","newInput","newOutput","index","Math","floor","random","length","map","arr","href","key","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAmDeA,G,YAxCA,SAAC,GAMF,IALZC,EAKW,EALXA,MACAC,EAIW,EAJXA,mBACAC,EAGW,EAHXA,OACAC,EAEW,EAFXA,OACAC,EACW,EADXA,MAEMC,EAAUC,iBAAO,MAEvB,OACE,yBACEC,UAAU,SACVC,QAAS,SAAAC,GACFJ,GAAYA,EAAQK,SACzBL,EAAQK,QAAQC,UAGjBT,GAAkB,GACnB,0BACEK,UAAU,mBACVK,IAAKP,EACLQ,iBAAe,EACfC,QAAS,SAAAL,GACP,GAAKJ,GAAYA,EAAQK,QAAzB,CACA,IAAMK,EAAWV,EAAQK,QAAQM,UACjCf,EAAmBc,MAGpBf,GAEFG,GAAkB,GAClBC,EACC,yBAAKa,YAAU,SAASV,UAAU,iBAC/BH,GAED,Q,uBCiDKc,EA/FE,CACf,CACEC,MAAM,uBACNC,OAAO,WAET,CACED,MAAM,oCACNC,OAAO,qCAET,CACED,MAAM,6CACNC,OAAO,KAET,CACED,MAAM,uBACNC,OAAO,UAET,CACED,MAAM,4CACNC,OAAO,4BAET,CACED,MAAM,0BACNC,OAAO,4BAET,CACED,MAAM,0BACNC,OAAO,aAET,CACED,MAAM,qBACNC,OAAO,kBAET,CACED,MAAM,eACNC,OAAO,OAET,CACED,MAAM,iBACNC,OAAO,mBAET,CACED,MAAM,wBACNC,OAAO,uBAET,CACED,MAAM,uBACNC,OAAO,sBAET,CACED,MAAM,YACNC,OAAO,KAET,CACED,MAAM,qBACNC,OAAO,KAET,CACED,MAAM,YACNC,OAAO,UAET,CACED,MAAM,kBACNC,OAAO,KAET,CACED,MAAM,0BACNC,OAAO,OAET,CACED,MAAM,sHACNC,OAAO,SAET,CACED,MAAM,2BACNC,OAAO,4BAET,CACED,MAAM,YACNC,OAAO,QAET,CACED,MAAM,OACNC,OAAO,QAET,CACED,MAAM,aACNC,OAAO,MAET,CACED,MAAM,2BACNC,OAAO,SCYLC,EAAYC,OAAOC,KAAKC,KAAQC,QAAO,SAAAC,GAG3C,MAA2B,oBADVF,IAAOE,MAIXC,EAtGO,WAAO,IAAD,EACAC,mBAAiBV,EAAS,GAAGC,OAD7B,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","file":"static/js/main.4d0bb484.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport \"./Editor.css\";\n\ntype Props = {\n  value: string;\n  handleValueChanged: Function;\n  prefix?: string;\n  suffix?: string;\n  error?: string;\n};\n\nconst Editor = ({\n  value,\n  handleValueChanged,\n  prefix,\n  suffix,\n  error\n}: Props) => {\n  const refSpan = useRef(null);\n\n  return (\n    <div\n      className=\"editor\"\n      onClick={e => {\n        if (!refSpan || !refSpan.current) return;\n        refSpan.current.focus();\n      }}\n    >\n      {prefix ? prefix : \"\"}\n      <span\n        className=\"editor__textarea\"\n        ref={refSpan}\n        contentEditable\n        onKeyUp={e => {\n          if (!refSpan || !refSpan.current) return;\n          const newValue = refSpan.current.innerText;\n          handleValueChanged(newValue);\n        }}\n      >\n        {value}\n      </span>\n      {suffix ? suffix : \"\"}\n      {error ? (\n        <div aria-live=\"polite\" className=\"editor__error\">\n          {error}\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Editor;\n","const examples = [\n  {\n    input: `[\"a\", \"b\", \"c\"], \"~\"`,\n    output: `\"a~b~c\"`\n  },\n  {\n    input: `[\"a\", \"b\"], [1, 2], [true, false]`,\n    output: `[[\"a\", 1, true], [\"b\", 2, false]]`\n  },\n  {\n    input: `{ \"a\": [{ \"b\": { \"c\": 3 } }] }, \"a[0].b.c\"`,\n    output: `3`\n  },\n  {\n    input: `[2, 1, 3, 4], [2, 3]`,\n    output: `[1, 4]`\n  },\n  {\n    input: `[{ \"x\": 1 }, { \"x\": 2 }, { \"x\": 1 }], \"x\"`,\n    output: `[{ \"x\": 1 }, { \"x\": 2 }]`\n  },\n  {\n    input: `[\"a\", \"b\", \"c\", \"d\"], 2`,\n    output: `[[\"a\", \"b\"], [\"c\", \"d\"]]`\n  },\n  {\n    input: `[0, 1, false, 2, \"\", 3]`,\n    output: `[1, 2, 3]`\n  },\n  {\n    input: `[1], 2, [3], [[4]]`,\n    output: `[1, 2, 3, [4]]`\n  },\n  {\n    input: `[1, 2, 3], 2`,\n    output: `[3]`\n  },\n  {\n    input: `[1, 2, 3], \"a\"`,\n    output: `[\"a\", \"a\", \"a\"]`\n  },\n  {\n    input: `[1, [2, [3, [4]], 5]]`,\n    output: `[1, 2, [3, [4]], 5]`\n  },\n  {\n    input: `[[\"a\", 1], [\"b\", 2]]`,\n    output: `{ \"a\": 1, \"b\": 2 }`\n  },\n  {\n    input: `[1, 2, 3]`,\n    output: `1`\n  },\n  {\n    input: `[1, 2, 1, 2], 2, 2`,\n    output: `3`\n  },\n  {\n    input: `[1, 2, 3]`,\n    output: `[1, 2]`\n  },\n  {\n    input: `[1, 2, 1, 2], 2`,\n    output: `3`\n  },\n  {\n    input: `[\"a\", \"b\", \"c\", \"d\"], 2`,\n    output: `\"c\"`\n  },\n  {\n    input: `[{ \"user\": \"barney\", \"active\": false }, { \"user\": \"fred\", \"active\": false }], { \"user\": \"barney\", \"active\": false }`,\n    output: `false`\n  },\n  {\n    input: `[{ \"a\": 1 }, { \"b\": 2 }]`,\n    output: `[{ \"a\": 1 }, { \"b\": 2 }]`\n  },\n  {\n    input: `[1, 2, 3]`,\n    output: `true`\n  },\n  {\n    input: `3, 1`,\n    output: `true`\n  },\n  {\n    input: `-10, -5, 5`,\n    output: `-5`\n  },\n  {\n    input: `{ \"a\": { \"b\": 2 } }, \"a\"`,\n    output: `true`\n  }\n]\n\nexport default examples;\n","import React, { useState, useCallback, Fragment, useEffect } from \"react\";\nimport lodash from \"lodash\";\nimport \"./App.css\";\nimport Editor from \"./Editor\";\nimport lodashMatches from \"./lodashMatches\";\nimport examples from \"./constants\";\n\nconst App: React.FC = () => {\n  const [input, setInput] = useState<string>(examples[0].input);\n  const [output, setOutput] = useState<string>(examples[0].output);\n  const [inputError, setInputError] = useState<string>(null);\n  const [outputError, setOutputError] = useState<string>(null);\n\n  const [lodashFunctions, setLodashFunctions] = useState<string[]>([]);\n\n  useEffect(() => {\n    const response = lodashMatches(input, output);\n    setLodashFunctions(response.matchingFns);\n    setInputError(response.inputError);\n    setOutputError(response.outputError);\n  }, [input, output, setLodashFunctions, setInputError, setOutputError]);\n\n  const handleInputChanged = useCallback(\n    (input: string) => {\n      setInput(input);\n    },\n    [setInput, setLodashFunctions, setInputError, setOutputError]\n  );\n\n  const handleOutputChanged = useCallback(\n    (output: string) => {\n      setOutput(output);\n    },\n    [setInput, setLodashFunctions, setInputError, setOutputError]\n  );\n\n  const handleExampleChanged = useCallback(() => {\n    let newInput = input;\n    let newOutput = output;\n    while (input === newInput && output === newOutput) {\n      const index = Math.floor(Math.random() * examples.length);\n      newInput = examples[index].input;\n      newOutput = examples[index].output;\n    }\n    setInput(newInput);\n    setOutput(newOutput);\n  }, [input, output, setInput, setOutput])\n\n  return (\n    <div className=\"App\">\n      <h1>Lodash Function Finder</h1>\n      <p>\n        Lodash has about {lodashFns.length} functions and it can be hard to\n        remember all of them.\n      </p>\n      <p>\n        Enter the expected <span className=\"code\">input</span> and{\" \"}\n        <span className=\"code\">output</span> and we'll show Lodash functions\n        that match.\n      </p>\n      <p>To see more example inputs and outputs, click the button below.</p>\n      <button onClick={handleExampleChanged}>Random Example</button>\n      <h2>Input</h2>\n      <Editor\n        value={input}\n        handleValueChanged={handleInputChanged}\n        prefix=\"someLodashFunction(\"\n        suffix=\");\"\n        error={inputError}\n      />\n      <h2>Output</h2>\n      <Editor\n        value={output}\n        handleValueChanged={handleOutputChanged}\n        error={outputError}\n      />\n      <h2>Matching Lodash Functions</h2>\n\n      {lodashFunctions.length > 0 ? (\n        <div aria-live=\"polite\">\n          Found {lodashFunctions.length} match\n          {lodashFunctions.length > 1 ? \"es\" : \"\"}\n          {\": \"}\n          {lodashFunctions.map((fn, index, arr) => (\n            <Fragment>\n              <a\n                href={`https://lodash.com/docs/#${fn}`}\n                key={fn}\n                target=\"_blank\"\n              >\n                {fn}\n              </a>\n              {index < arr.length - 1 ? \", \" : \".\"}\n            </Fragment>\n          ))}{\" \"}\n        </div>\n      ) : (\n        \"No matching lodash functions :(\"\n      )}\n    </div>\n  );\n};\n\nconst lodashFns = Object.keys(lodash).filter(fnName => {\n  // @ts-ignore\n  const lodashFn = lodash[fnName];\n  return typeof lodashFn === \"function\";\n});\n\nexport default App;\n","import lodash from \"lodash\";\nimport JSON5 from \"json5\";\n\nexport default function(input: string, output: string): LodashFnsResponse {\n  const inputJSONString = `[${input}]`;\n  const outputJSONString = `${output}`;\n  let inputArgs: any[] = [];\n  try {\n    inputArgs = JSON5.parse(inputJSONString);\n  } catch (e) {\n    return {\n      matchingFns: [],\n      inputError: `Problem parsing: ${inputJSONString}`,\n      outputError: null\n    };\n  }\n  let outputObjString: string;\n  try {\n    outputObjString = JSON5.stringify(JSON5.parse(outputJSONString));\n  } catch (e) {\n    return {\n      matchingFns: [],\n      inputError: null,\n      outputError: e.toString()\n    };\n  }\n  const fns = Object.keys(lodash);\n  const matchingFns = fns.filter(fn => {\n    // @ts-ignore\n    const lodashFn = lodash[fn];\n    if (typeof lodashFn !== \"function\") {\n      return false;\n    }\n    try {\n      const actualOutputObj = lodashFn(...lodash.cloneDeep(inputArgs));\n      const actualOutputObjString = JSON5.stringify(actualOutputObj);\n      return actualOutputObjString === outputObjString;\n    } catch (e) {\n      // ignore error\n      return false;\n    }\n  });\n  return {\n    matchingFns,\n    inputError: null,\n    outputError: null\n  };\n}\n\ntype LodashFnsResponse = {\n  matchingFns: string[];\n  inputError: null | string;\n  outputError: null | string;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}