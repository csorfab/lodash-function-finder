{"version":3,"sources":["Editor.tsx","App.tsx","lodashMatches.tsx","serviceWorker.ts","index.tsx"],"names":["Editor","defaultValue","handleValueChanged","prefix","suffix","error","useState","value","refSpan","useRef","className","onClick","e","current","focus","ref","contentEditable","onKeyUp","newValue","innerText","aria-live","lodashFns","Object","keys","lodash","filter","fnName","App","input","setInput","output","setOutput","inputError","setInputError","outputError","setOutputError","lodashFunctions","setLodashFunctions","useEffect","response","outputObjString","inputJSONString","outputJSONString","inputArgs","JSON5","parse","matchingFns","stringify","toString","fn","lodashFn","actualOutputObj","cloneDeep","lodashMatches","handleInputChanged","useCallback","handleOutputChanged","length","map","index","arr","href","key","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3cf69e54.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport \"./Editor.css\";\n\ntype Props = {\n  defaultValue: string;\n  handleValueChanged: Function;\n  prefix?: string;\n  suffix?: string;\n  error?: string;\n};\n\nconst Editor = ({\n  defaultValue,\n  handleValueChanged,\n  prefix,\n  suffix,\n  error\n}: Props) => {\n  const [value] = useState<string>(defaultValue);\n  const refSpan = useRef(null);\n  return (\n    <div\n      className=\"editor\"\n      onClick={e => {\n        if (!refSpan || !refSpan.current) return;\n        refSpan.current.focus();\n      }}\n    >\n      {prefix ? prefix : \"\"}\n      <span\n        className=\"editor__textarea\"\n        ref={refSpan}\n        contentEditable\n        onKeyUp={e => {\n          if (!refSpan || !refSpan.current) return;\n          const newValue = refSpan.current.innerText;\n          handleValueChanged(newValue);\n        }}\n      >\n        {value}\n      </span>\n      {suffix ? suffix : \"\"}\n      {error ? (\n        <div aria-live=\"polite\" className=\"editor__error\">\n          {error}\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Editor;\n","import React, { useState, useCallback, Fragment, useEffect } from \"react\";\nimport lodash from \"lodash\";\nimport \"./App.css\";\nimport Editor from \"./Editor\";\nimport lodashMatches from \"./lodashMatches\";\n\nconst App: React.FC = () => {\n  const [input, setInput] = useState<string>(`[\"a\", \"b\", \"c\"], \"~\"`);\n  const [output, setOutput] = useState<string>(`\"a~b~c\"`);\n  const [inputError, setInputError] = useState<string>(null);\n  const [outputError, setOutputError] = useState<string>(null);\n\n  const [lodashFunctions, setLodashFunctions] = useState<string[]>([]);\n\n  useEffect(() => {\n    const response = lodashMatches(input, output);\n    setLodashFunctions(response.matchingFns);\n    setInputError(response.inputError);\n    setOutputError(response.outputError);\n  }, [input, output, setLodashFunctions, setInputError, setOutputError]);\n\n  const handleInputChanged = useCallback(\n    (input: string) => {\n      setInput(input);\n    },\n    [setInput, setLodashFunctions, setInputError, setOutputError]\n  );\n\n  const handleOutputChanged = useCallback(\n    (output: string) => {\n      setOutput(output);\n    },\n    [setInput, setLodashFunctions, setInputError, setOutputError]\n  );\n\n  return (\n    <div className=\"App\">\n      <h1>Lodash Function Finder</h1>\n      <p>\n        Lodash has about {lodashFns.length} functions and it can be hard to\n        remember all of them.\n      </p>\n      <p>\n        Enter the expected <span className=\"code\">input</span> and{\" \"}\n        <span className=\"code\">output</span> and we'll show Lodash functions\n        that match.\n      </p>\n      <h2>Input</h2>\n      <Editor\n        defaultValue={input}\n        handleValueChanged={handleInputChanged}\n        prefix=\"someLodashFunction(\"\n        suffix=\");\"\n        error={inputError}\n      />\n      <h2>Output</h2>\n      <Editor\n        defaultValue={output}\n        handleValueChanged={handleOutputChanged}\n        error={outputError}\n      />\n      <h2>Matching Lodash Functions</h2>\n\n      {lodashFunctions.length > 0 ? (\n        <div aria-live=\"polite\">\n          Found {lodashFunctions.length} match\n          {lodashFunctions.length > 1 ? \"es\" : \"\"}\n          {\": \"}\n          {lodashFunctions.map((fn, index, arr) => (\n            <Fragment>\n              <a\n                href={`https://lodash.com/docs/#${fn}`}\n                key={fn}\n                target=\"_blank\"\n              >\n                {fn}\n              </a>\n              {index < arr.length - 1 ? \", \" : \".\"}\n            </Fragment>\n          ))}{\" \"}\n        </div>\n      ) : (\n        \"No matching lodash functions :(\"\n      )}\n    </div>\n  );\n};\n\nconst lodashFns = Object.keys(lodash).filter(fnName => {\n  // @ts-ignore\n  const lodashFn = lodash[fnName];\n  return typeof lodashFn === \"function\";\n});\n\nexport default App;\n","import lodash from \"lodash\";\nimport JSON5 from \"json5\";\n\nexport default function(input: string, output: string): LodashFnsResponse {\n  const inputJSONString = `[${input}]`;\n  const outputJSONString = `${output}`;\n  let inputArgs: any[] = [];\n  try {\n    inputArgs = JSON5.parse(inputJSONString);\n  } catch (e) {\n    return {\n      matchingFns: [],\n      inputError: `Problem parsing: ${inputJSONString}`,\n      outputError: null\n    };\n  }\n  let outputObjString: string;\n  try {\n    outputObjString = JSON5.stringify(JSON5.parse(outputJSONString));\n  } catch (e) {\n    return {\n      matchingFns: [],\n      inputError: null,\n      outputError: e.toString()\n    };\n  }\n  const fns = Object.keys(lodash);\n  const matchingFns = fns.filter(fn => {\n    // @ts-ignore\n    const lodashFn = lodash[fn];\n    if (typeof lodashFn !== \"function\") {\n      return false;\n    }\n    try {\n      const actualOutputObj = lodashFn(...lodash.cloneDeep(inputArgs));\n      const actualOutputObjString = JSON5.stringify(actualOutputObj);\n      return actualOutputObjString === outputObjString;\n    } catch (e) {\n      // ignore error\n      return false;\n    }\n  });\n  return {\n    matchingFns,\n    inputError: null,\n    outputError: null\n  };\n}\n\ntype LodashFnsResponse = {\n  matchingFns: string[];\n  inputError: null | string;\n  outputError: null | string;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}